instruction_width = 64;

/// A base instruction for binary arithmetic operations
instruction BinOp<name, opcode> {
  timing: async
  fields:
    /// The destination register
    dst: 5,
    /// The first source register
    src1: 5,
    /// The second source register
    src2: 5,
    /// Set a flag that sign extends the result
    sign_extend: 1

  assembly:
    $name['.sx' = sign_extend] 'r'dst 'r'src1 'r'src2;

  machine:
    opcode: 7 = $opcode,
    sign_extend,
    dst,
    _: 3,
    src1,
    _: 3,
    src2,
    _: 3
}

/// Add values from two registers
instruction Add: BinOp<'add', 2> {
  assembly:
    examples:
      /// Add the contents of registers 4 and 7 placing the result in
      /// register 0.
      add r0 r4 r7;

      /// Add the contents of registers 4 and 7 sign-extending and
      /// placing the result in register 0.
      add.sx r0 r4 r7;
}

/// Subtract values from two registers
instruction Sub: BinOp<'sub', 3> {
  timing: 47 cycle
  assembly:
    examples:
      /// Subtract the contents of registers 4 and 7 placing the result in
      /// register 0.
      sub r0 r4 r7;

      /// Subtract the contents of registers 4 and 7 sign-extending and
      /// placing the result in register 0.
      sub.sx r0 r4 r7;
}
